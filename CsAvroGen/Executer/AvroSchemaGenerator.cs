using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Text;
using CsAvroGen.DomainModel;


namespace holonsoft.CsAvroGen.Executer
{
    internal class AvroSchemaGenerator
    {
        private static readonly int _indentFactor = 4;

        private readonly StringBuilder _sb = new StringBuilder();
        private ProgramArgs _prgArgs;

        internal void Generate(ProgramArgs prgArgs, TypeInfoData typeInfoData)
        {
            _prgArgs = prgArgs;

            if (!_prgArgs.FlattenDirStructure)
            {
                var splitted = Path.Combine(typeInfoData.Namespace.Split('.', StringSplitOptions.RemoveEmptyEntries));
                _prgArgs.OutDir = Path.GetFullPath(Path.Combine(prgArgs.OutDir, splitted));
            }
            else
            {
                _prgArgs.OutDir = Path.GetFullPath(prgArgs.OutDir);
            }

            if (!Directory.Exists(prgArgs.OutDir))
            {
                Directory.CreateDirectory(prgArgs.OutDir);
            }

            _sb.Clear();

            WriteCommonHeader();


            _sb.AppendLine("{");
            _sb.Append("\t" + "name".ToDoubleQoutedString());
            _sb.Append(": ");
            _sb.Append(typeInfoData.InspectedType.Name.ToDoubleQoutedString());
            _sb.AppendLine(", ");

            _sb.Append("\t" + "type".ToDoubleQoutedString());
            _sb.Append(": ");
            _sb.Append("record".ToDoubleQoutedString());
            _sb.AppendLine(", ");

            _sb.Append("\t" + "namespace".ToDoubleQoutedString());
            _sb.Append(": ");
            _sb.Append(prgArgs.NamespaceToLowercase
                            ? typeInfoData.Namespace.ToLowerInvariant().ToDoubleQoutedString()
                            : typeInfoData.Namespace.ToDoubleQoutedString());
            _sb.AppendLine(", ");

            var indent = 1;

            WriteRecord(typeInfoData.FieldList, indent + 1);
            
            _sb.AppendLine("}");

            var outFile = Path.Combine(prgArgs.OutDir, _prgArgs.TypeName) + ".avsc";

            File.WriteAllText(outFile, _sb.ToString());
        }


        private void WriteCommonHeader()
        {
            if (!_prgArgs.WriteCommentHeaderInAvroFile) return;

            _sb.AppendLine("// ------------------------------------------------------------------------------");
            _sb.AppendLine("// <auto-generated>");
            _sb.AppendLine("//    Generated by " + AppDomain.CurrentDomain.FriendlyName + " V" + Assembly.GetExecutingAssembly().AssemblyVersion().ToString());
            _sb.AppendLine("//    Changes to this file may cause incorrect behavior and will be lost if code");
            _sb.AppendLine("//    is regenerated");
            _sb.AppendLine("//    Generated at (UTC): " + DateTime.UtcNow.ToString("u"));
            _sb.AppendLine("// </auto-generated>");
            _sb.AppendLine("// ------------------------------------------------------------------------------");
            _sb.AppendLine("");
        }


        private void WriteRecord(IEnumerable<ExtendedFieldInfo> efi, int indent)
        {
            _sb.Append(" ".Repeat(indent * _indentFactor));
            _sb.AppendLine("fields".ToDoubleQoutedString() + ": [");

            foreach (var extendedFieldInfo in efi)
            {
                WriteFieldToAvro(extendedFieldInfo, indent + 1);
            }

            _sb.Append(" ".Repeat(indent * _indentFactor));
            _sb.AppendLine("]");

        }


        private void WriteFieldToAvro(ExtendedFieldInfo extendedFieldInfo, int indent)
        {
            // https://avro.apache.org/docs/current/spec.html#schema_primitive


            var indentStr = " ".Repeat(indent * _indentFactor);

            
            switch (extendedFieldInfo.TypeCode)
            {
                // primitives
                case TypeCode.Empty:
                    break;
                case TypeCode.Boolean:
                    WritePrimitiveTypeInfo(indentStr, extendedFieldInfo, "boolean");
                    return;
                case TypeCode.Int64:
                    WritePrimitiveTypeInfo(indentStr, extendedFieldInfo, "long");
                    return;
                case TypeCode.Single:
                    WritePrimitiveTypeInfo(indentStr, extendedFieldInfo, "float");
                    return;
                case TypeCode.Double:
                    WritePrimitiveTypeInfo(indentStr, extendedFieldInfo, "double");
                    return;
                case TypeCode.String:
                    WritePrimitiveTypeInfo(indentStr, extendedFieldInfo, "string");
                    return;
                
                // primitives or complex if enum
                case TypeCode.Int32:
                    if (extendedFieldInfo.FieldInfo.FieldType.BaseType == typeof(Enum))
                    {

                    }
                    else
                    {
                        WritePrimitiveTypeInfo(indentStr, extendedFieldInfo, "int");
                    }
                    return;

                // logical type
                case TypeCode.Decimal:

                    return;
                
            }

            if (extendedFieldInfo.IsArray)
            {
                WriteArrayTypeInfo(indentStr, extendedFieldInfo, "");
            }
        }

        private void WriteArrayTypeInfo(string indentStr, ExtendedFieldInfo extendedFieldInfo, string empty)
        {
            
        }


        private void WritePrimitiveTypeInfo(string indentStr, ExtendedFieldInfo extendedFieldInfo, string avroTypeName)
        {
            _sb.Append(indentStr);
            _sb.Append("{ ");
            _sb.Append("name".ToDoubleQoutedString() + ": ");
            _sb.Append(extendedFieldInfo.FieldName.ToDoubleQoutedString() + ", ");
            _sb.Append("type".ToDoubleQoutedString() + ": ");

            if (extendedFieldInfo.IsNullable)
            {
                _sb.Append("[" + "null".ToDoubleQoutedString() + ", " + avroTypeName.ToDoubleQoutedString() + "]");
            }
            else
            {
                _sb.Append(avroTypeName.ToDoubleQoutedString());
            }


            if (extendedFieldInfo.HasDefaultValue)
            {
                _sb.Append(", " + "default".ToDoubleQoutedString() + ": " + 
                            (extendedFieldInfo.TypeCode == TypeCode.String
                                ? extendedFieldInfo.AvroDefaultValue.ToString().ToDoubleQoutedString()
                                : extendedFieldInfo.AvroDefaultValue));
            }

            _sb.AppendLine(" }, ");
        }
    }
}